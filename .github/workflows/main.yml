name: package

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches: [master]

    # Publish `v1.2.3` tags as releases.
    tags: [v*]

env:
  IMAGE_NAME: edjtest

jobs:
  # Build and run tests.
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

  # Push docker image to GitHub Packages.
  publish:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2

      - name: Build docker image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME
      - name: Log into registry
        run: docker login docker.pkg.github.com -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
      - name: Push docker image with version tag
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `alpha` tag convention
          [ "$VERSION" == "master" ] && VERSION=alpha
      
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
